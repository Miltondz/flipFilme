rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function areFriends(userId) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.friends.hasAny([userId]);
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    // Movies collection
    match /movies/{movieId} {
      allow read: if isAuthenticated() && (
        isOwner(resource.data.userId) || 
        (resource.data.public == true && areFriends(resource.data.userId))
      );
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isOwner(resource.data.userId);
      allow delete: if isOwner(resource.data.userId);
    }

    // Friends collection
    match /friends/{friendshipId} {
      allow read: if isAuthenticated() && 
        resource.data.users.hasAny([request.auth.uid]);
      allow create: if isAuthenticated() && 
        request.resource.data.users.hasAny([request.auth.uid]);
      allow update: if isAuthenticated() && 
        resource.data.users.hasAny([request.auth.uid]);
      allow delete: if isAuthenticated() && 
        resource.data.users.hasAny([request.auth.uid]);
    }
  }
}